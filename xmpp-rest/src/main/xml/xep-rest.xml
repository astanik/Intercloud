<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>REST with XMPP</title>
  <abstract>This specification defines how the Representational State Transfer (REST)
  architectural style can be applied to an XMPP overlay network. It specifies 
  an XMPP protocol extension for accessing resources and transporting resource metadata and XML-REST encoded 
  requests and responses between two XMPP entities.</abstract>
  <legal>
    <copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2014 by the XMPP Standards Foundation (XSF).</copyright>
    <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
    <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
    <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
    <conformance>This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://xmpp.org/extensions/ipr-policy.shtml'>http://xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).</conformance>
  </legal>
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Alexander</firstname>
    <surname>Stanik</surname>
    <email>alexander.stanik@tu-berlin.de</email>
    <uri>http://www.cit.tu-berlin.de/</uri>
  </author>
  <revision>
    <version>0.0.1</version>
    <date>2015-04-27</date>
    <initials>psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Representational State Transfer (<cite>REST</cite>) is an architectural style that is a coordinated
  set of constraints which also apply to the web. It aims at simplifying component implementations, reducing
  the complexity of distributed software elements, improving the performance, and increasing the 
  scalability. In relation to the definition of a RESTful application programming interface (API)
  the uniform interface constraint is of high importance. It simplifies and decouples the architecture
  and makes REST components independent. The constraints for a uniform interface can be reduced to:
  the identification of resources, the self-descriptive representation of resources, and the 
  self-descriptive manipulation of resources.</p>
  <p>REST systems typically communicate over the Hypertext Transfer Protocol (HTTP) and are gaining 
  large acceptance due to its
  growing support and its simplicity for implementation. RESTful web services
  are in this context a simpler alternative to &w3soap; and WSDL-based Web services which are specified 
  for the use with XMPP
  in &xep0072; and also a more powerful alternative to &xmlrpc; which are specified as XMPP extension 
  in &xep0009;.</p>
  <p>The &xep0332; allows for designing REST services in the context of XMPP, but requires an implementation
  of both protocols: XMPP and HTTP. Furthermore, HTTP was selected in the past because of its 
  degree of popularity, but has some drawbacks like the lack of discoverability of services.
  The REST with XMPP extension is a powerful protocol for cloud services that has 
  several advantages in contrast to the traditional HTTP-based REST approach:</p>
  <ol>
    <li>services are discoverable and explorable,</li>
    <li>asynchronous invocation can be performed in parallel,</li>
    <li>generation of clients on the fly based on the capabilities of resources, and</li>
    <li>multiple input and output types definitions are possible.</li>
  </ol>
  <p>The REST with XMPP protocol makes use of the &IQ; stanza in order to enable access, to create, to delete,
  or to modify resources within a XMPP network overlay. This specification defines two XML Schema files:
  one for exploring the capabilities of a resource and one for transfering
  representations to a method or performing actions on a resource.</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>The author has designed the REST with XMPP protocol with the following requirements in mind:</p>
  <ul>
  	<li><p>REST with XMPP should be easy to implement such as it is with REST over HTTP.</p></li>
  	<li><p>This specification should apply the REST architectural style to XMPP and should eliminate limitations of HTTP.</p></li>
  	<li><p>Resources should be linkable in terms of static connections as well as link targets used for resource access and modifications.</p></li>
  	<li><p>The number of request and <strong>response</strong> parameters, representations and links should be unbounded.</p></li>
  	<li><p>The number of operations should be unlimited as in contrast to HTTP's GET, POST, PUT, DELETE methods.</p></li>
  </ul>
</section1>
<section1 topic='Resource Exploration' anchor='restdis'>
  <p>In order to explore the capabilities of a resource, the &IQ; stanza type "get" have to be used. The returned 
  &IQ; stanza is either of type "error" or "result". If it is of type "result", the returned content has to be
  complied with the xwadl schema of this specification. The xwadl schema has been designed for providing a machine 
  process-able description of a resource. It was inspired by the Web Application Description Language (WADL)
  standard delivered by the World Wide Web Consortium (W3C).</p>
  <p>An &IQ; stanza of type "get" is returning an &IQ; stanza of type "result" that describes all actions that the
  requesting party can perform. The following example shows an exploration of a cloud provider's REST based 
  interface for handling compute services.</p>
      <!-- computeExplorationRequestIQ.xml -->
      <example caption='Exploration of an OpenStack interface for handling compute services'><![CDATA[
<iq type='get' 
    from='requester@company-b.com/rest-client' 
    to='company-a.com/openstack' 
    id='rest1'>
  <resource_type xmlns="urn:xmpp:rest-xwadl" path="/compute" />
</iq>
      ]]></example>
  <p>In order to explore a resource, only the path to a resource is required. The counter party has to
  answer of such a request with a response that exposes all possible actions which can be performed on the 
  resource located at the specified path. The following example illustrates a response that exposes all
  actions for this resource.</p>
      <!-- computeExplorationResponseIQ.xml -->
      <example caption='Result of an exploration for handling compute services'><![CDATA[
<iq type="result"
    from="company-a.com/openstack" 
    to="requester@company-b.com/rest-client"
    id="rest1">
  <resource_type xmlns="urn:xmpp:rest-xwadl" path="/compute">  
    <documentation title="Summary">
       This resource allows for manage compute instances, e.g. creating virtual machines.
    </documentation> 
    <method type="POST">
       <request mediaType="text/occi">
       ...
       </request>
       <response mediaType="text/uri" />
    </method>
    <method type="GET">
       <response mediaType="text/uri-list" />
    </method>
  </resource_type>
</iq>
      ]]></example>
  <p>This response exposes two methods that can be performed on the 
  resource located at "/compute". The first method "POST" can be used to create one or
  more virtual machines (VM). This method expects a representation of media-type "text/occi"
  and returns a representation of media-type "text/url". 
  A detailed example of how to access this method is 
  illustrated later in the <link url='#restaccess'>Resource Access</link> subsection.
  Based on this overview,
  the following subsections describe each element of the designed XWADL
  schema and its assigning documents in detail.</p>
  <section2 topic='Resource Type' anchor='restdis-resourcetype'>
    <p>The "resource_type" element forms the root of a xwadl document and MAY comprises the following 
    sub-elements: "documentation", "grammars", "action", and "method".
    This REST with XMPP specification distinguishes between two kinds of
    operations: actions and methods. Methods are used to transfer
    state representations according predefined media types among two entities.
    Actions in turn are used to perform operations on a resource in order to 
    retrieve a single primitive values or to change the state of a
    resource.
    In fact, while methods are used to transfer representations, actions are used to
    call operation with primitive data type as parameters or return value similar to
    XML-RPC.</p>
  </section2>
  <section2 topic='Documentation' anchor='restdis-documentation'>
    <p>Each xwadl-defined element down to the "param" can have one or more child "documentation" elements that 
    can be used to document that element. The documentation element has a "title" attribute which is a short plain 
    text description of the element being documented. The "documentation" element can have mixed content 
    and may contain text and zero or more child elements.</p>
  </section2>
  <section2 topic='Grammars' anchor='restdis-grammars'>
    <p>The "grammars" element acts as a container for definitions of the format of data exchanged 
    during execution of the protocol described by the xwadl document and SHOULD be according to the  
    XML Schema definition.</p>
      <!-- grammarsExampleResponseIQ.xml -->
      <example caption='Example xwadl document with a grammars element'><![CDATA[
<iq type="result"  
    from="responder@company-a.com" 
    to="requester@company-b.com/rest-client"
    id="rest1">
  <resource_type xmlns="urn:xmpp:rest-xwadl" xmlns:xs="http://www.w3.org/2001/XMLSchema" path="/address-book">  
    <grammars> 
      <doc title="Person List"/>  
      <xs:element name="PersonList" type="MyStructType"/>  
      <xs:complexType name="MyStructType"> 
        <xs:sequence> 
          <xs:element name="Person" type="MyPersonType" maxOccurs="unbounded"/> 
        </xs:sequence> 
      </xs:complexType>  
      <xs:complexType name="MyPersonType"> 
        <xs:sequence> 
          <xs:element name="name" type="xs:string"/>  
          <xs:element name="age" type="xs:integer"/> 
        </xs:sequence> 
      </xs:complexType> 
    </grammars>  
    <method name="POST"> 
      <request> 
        <param name="persons" required="true" repeating="false"> 
          <option type="MyStructType"/> 
        </param> 
      </request>  
      <response/> 
    </method> 
  </resource_type>
</iq>
      ]]></example>
  </section2>
  <section2 topic='Method' anchor='restdis-method'>
    <p>A method element describes a specific operation that can be performed on a
resource targeted by the "path" attribute of the "resource_type"
element.
A method element is a child of a "resource_type" element and has a
"type" attribute that identifies the kind of such a method.
In order to achieve simplicity for implementation and having uniform interface
constraints, methods are of a specific type. The types defined for a method are
GET, POST, PUT, and DELETE like the CRUD
methods of HTTP. This has the purpose to gain a feeling of familiarity for the
developer and increases his intention to use.
Additionally, each method can have one "request" and one "response"
element which can be empty or be used to expose optional templates 
for representations expected by this method.</p>
  </section2>
  <section2 topic='Request and Response' anchor='restdis-reqeesp'>
    <p>The request and the response elements of a method 
describe the input and output representation data to be transferred among an
entity and a resource of another entity.
While a request describes the input to the method,
a response describes the output from the method.
Both elements have a required mediaType attribute that specifies the
media type of the representation expected by the method.
A request element in contrast to a response element
can also define a set of representation templates as illustrated below.</p>
      <example caption='Templates for creating a virtual machine'><![CDATA[
...
<request mediaType="xml/occi">
   <template>
      <Category xmlns="urn:xmpp:occi-representation">
         <Kind>
            <term>compute</term>
            <schema>http://schema.ogf.org/occi/infrastructure#</schema>
            <title>Compute Resource</title>
            <attribute name="occi.compute.architecture" type="Enum">x64</attribute> 
            <attribute name="occi.compute.memory" type="Double">1.0</attribute>
            <attribute name="occi.compute.cores" type="Integer">2</attribute>
         </Kind>
      </Category>
   </template>
   <template>
      <Category xmlns="urn:xmpp:occi-representation">
         <Kind>
            <term>compute</term>
            <schema>http://schema.ogf.org/occi/infrastructure#</schema>
            <title>Compute Resource</title>
            <attribute name="occi.compute.architecture" type="Enum">x64</attribute> 
            <attribute name="occi.compute.memory" type="Double">8.0</attribute>
            <attribute name="occi.compute.cores" type="Integer">4</attribute>
         </Kind>
      </Category>
   </template>
</request>
...
      ]]></example>
  </section2>
  <section2 topic='Action' anchor='restdis-action'>
    <p>An action element describes a specific action operation that can be performed on
a resource targeted by the path attribute of the "resource_type"
element.
An action element is a child of a "resource_type" element and has a
name attribute that identifies a specific invokable operation of a
resource.
The number of actions and the amount of parameters of an action is unlimited.
This eliminate
limitations of HTTP and allows for defining APIs similar to SOAP and
XML-RPC. In combination with detailed descriptions of each individual
element, this achieves self-descriptive, efficient, and fractional resource
capabilities for self-descriptive manipulation of resources as illustrated in
listing below.</p>
      <example caption='Result of an exploration for contoling a virtual machine'><![CDATA[
...
<resource_type xmlns="urn:xmpp:rest-xwadl" path="/compute/vm1">  
   ...
   <action name="stop">
      <documentation title="Stop this virtual machine"/> 
      <parameter name="method" type="STRING">
         <documentation title="The method used for stopping this vm">
            Accepted values are: graceful, acpioff, or poweroff
         </documentation>
      </parameter>
      <result type="BOOLEAN">
         <documentation title="Returns true if the vm has been stopped successfully"/> 
      </result>
   </action>
</resource_type>
...
      ]]></example>
    <p>Each action can have one result and zero or more parameter
elements which specify the types of expected parameters and the return value.
A parameter element describes a parameterized value and can be
identified by its name attribute. Additionally,
it must have a required type attribute that declares the type of
this parameter.
The schema defines a static set of possible primitive data types:
STRING, INTEGER, DOUBLE, BOOLEAN, and
LINK.
These primitive data types are also required to specify the return value in
the result element as illustrated in listing
below.
A parameter element can also have an optional 
default attribute that exposes a default value which is applied
if this parameter is not stated. Therefore, if this attribute is
specified, the overall parameter element is optional when accessing a
resource.</p>
      <example caption='Result of an exploration for contoling a virtual machine'><![CDATA[
...
<resource_type xmlns="urn:xmpp:rest-xwadl" path="/compute/vm1">  
   ...
   <action name="start">
      <documentation title="Start this virtual machine"/> 
      <result type="BOOLEAN">
         <documentation title="Returns true if the vm has been started successfully"/> 
      </result>
   </action>
</resource_type>
...
      ]]></example>
<p>When retrieving an XWADL document for a specific resource, this XWADL document
comprises all methods and actions that are available for this particular
resource at a specific moment in time. It is like a snapshot of capabilities
and the state of this resource. In fact, the actions illustrated in the listings 
above are never
available at the same time and thus can never be found in the same XWADL
document. This methodology enables state machine implementations for resources
and eliminate thus further limitations of HTTP.</p>
  </section2>
</section1>
<section1 topic='Resource Access' anchor='restaccess'>
  <p>In order to access a resource, the &IQ; stanza type "set" has to be used. The returned 
  &IQ; stanza is either of type "error" or "result". If it is of type "result", the returned content has to be
  complied with the xml-rest schema of this specification. The xml-rest schema has been designed 
  for providing a xml-rest encoded payload for accessing a resource. 
  An &IQ; stanza must not contain more than one method element or one action
element with an individual request and response media-type or a
corresponding sequence of parameters.
The following example in the listing below illustrates how the
POST method of the previous example is requested.
Here, the client creates a VM which is configured according
a previously advertised flavor.</p>
      <!-- computeCreateRequestIQ.xml -->
      <example caption='Access of an OpenStack interface to create a virtual machnine'><![CDATA[
<iq type="set"
    from="requester@company-b.com/rest-client"
    to="company-a.com/openstack"
    id="rest2">
  <resource xmlns="urn:xmpp:xml-rest" path="/compute">  
    <method type="POST"> 
      <request mediaType="xml/occi">
        <Category xmlns="urn:xmpp:occi-representation">
           <Kind>
             <term>compute</term>
             <schema>http://schema.ogf.org/occi/infrastructure#</schema>
             <title>Compute Resource</title>
             <attribute name="occi.compute.architecture"
                 type="Enum">x64</attribute> 
             <attribute name="occi.compute.memory"
                 type="Double">1.0</attribute> 
             <attribute name="occi.compute.cores" 
                 type="Integer">2</attribute> 
            </Kind>
        </Category>
      </request>  
      <response mediaType="text/uri" />
    </method> 
  </resource>
</iq>
      ]]></example>
  <p>In order to make sure that both parties have a common understanding, the requester specifies also
the expected responds type which has been exposed during the exploration step. The counter party has to
answer to such a request with no request element and an extended
complement of the response element as illustrated in the example in the
listing below. The identification of a response to an
associated request is accomplished by the id of the &IQ; stanza.
  </p>
      <!-- computeCreateRequestIQ.xml -->
      <example caption='Result of an access to create a virtual machnine'><![CDATA[
<iq type="result" 
    from="company-a.com/openstack"
    to="requester@company-b.com/rest-client"
    id="rest2">
  <resource xmlns="urn:xmpp:xml-rest" path="/compute">  
    <method type="POST"> 
      <response mediaType="text/uri">
         <representation>
            xmpp://company-a.com/openstack#/compute/vm1
         </representation>
      </response>
    </method> 
  </resource>
</iq>
      ]]></example>
  <p>The resource element forms the root of an XML-REST document and must
comprise only a single method or action as sub-element. In
contrast to the XWADL description, no further documentation or grammars are
allowed in order to keep the number of bytes as low as possible.
In order to specify the resource to access, the path attribute is
required identical to XWADL.</p>
<p>The method element can have one request element and/or one response
element.
Additionally, the type attribute is required in order to identify the
operation that has to be performed on the resource.
The request and the response elements of a method are
in the XML-REST schema similar to the definition in XWADL. Both have an
mediaType attribute in order to define the input and
output data of the method.
The request attribute in XML-REST has no templates in contrast to
XWADL. Here only XML with namespace definitions are allowed or the
predefined representation element for plain text can be used as
child elements.</p>
<p>
Actions are encoded appropriated. An action element can have one
result element and one or more parameter elements.
In contrast to XWADL, both have no type attributes. The type in encoded as child
element with an assigned XML type definition. Thus types are able to verify by
validating an XML-REST document with its appropriated XML-REST schema.
</p>
<p>
A link targets to a single location locally
or remotely within an XMPP network overlay. A link is expressed according
RFC 2396 that specifies the syntactic constraints of an URI
string, e.g. xmpp://company-a.com/openstack#/compute/vm1.
Here, the authority and path elements constitute the JID and the fragment
element is the Path of the resource at that entity identified by
its JID.</p>
 
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <!-- section2 topic='Retrieving a specific representation' anchor='usecases-intercloud'>
    <p>Example to access the sla method.</p>
  </section2 -->
  <section2 topic='Multi-Dimensional Resource Placement' anchor='usecases-multi-dim'>
    <p>The REST with XMPP protocol enables a multi-dimensional resource placement. The following examples show 
    how different resources can be placed within a single server entity:</p>
      <example caption='A request to a server'><![CDATA[
<iq type='set' 
    from='requester@company-b.com/rest-client' 
    to='company-a.com' 
    id='rest1'>
  <resource xmlns="urn:xmpp:xml-rest" path="/">
    ...
  </resource>
</iq>
  ]]></example>
      <example caption='A request to a server with a JID contained a resource part'><![CDATA[
<iq type='set' 
    from='requester@company-b.com/rest-client' 
    to='company-a.com/resource' 
    id='rest1'>
  <resource xmlns="urn:xmpp:xml-rest" path="/">
    ...
  </resource>
</iq>
  ]]></example>
      <example caption='A request to a server with a JID contained a local part'><![CDATA[
<iq type='set' 
    from='requester@company-b.com/rest-client' 
    to='responder@company-a.com' 
    id='rest1'>
  <resource xmlns="urn:xmpp:xml-rest" path="/">
    ...
  </resource>
</iq>
  ]]></example>
      <example caption='A request to a server with a JID contained a local and a resource part'><![CDATA[
<iq type='set' 
    from='requester@company-b.com/rest-client' 
    to='responder@company-a.com/resource' 
    id='rest1'>
  <resource xmlns="urn:xmpp:xml-rest" path="/">
    ...
  </resource>
</iq>
  ]]></example>
      <example caption='A request to a server with a JID contained a local and a resource part, but accesses another resource'><![CDATA[
<iq type='set' 
    from='requester@company-b.com/rest-client' 
    to='responder@company-a.com/resource' 
    id='rest1'>
  <resource xmlns="urn:xmpp:xml-rest" path="/resource/">
    ...
  </resource>
</iq>
  ]]></example>
  <p>All examples above are accessing different resources. A variation of the path attribute of the resource 
  element would also combine the presented JIDs and referring to different resources. 
  Further examples are possible to show how different resources can be located at a single server entity.</p>
  </section2>
</section1>
<section1 topic='Service Discovery' anchor='disco'>
  <p>If an entity supports the REST with XMPP protocol, it SHOULD advertise that fact in response to &xep0030; information ("diso#info") requests by returning an identity of "automation/rest" and a feature of "jabber:iq:rest":</p>
  <example caption='A disco#info query'><![CDATA[
<iq type='get' 
    from='requester@company-b.com/rest-client' 
    to='responder@company-a.com/rest-server' 
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption='A disco#info response'><![CDATA[
<iq type='result' 
    to='requester@company-b.com/rest-client' 
    from='responder@company-a.com/rest-server' 
    id='disco1'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='automation' type='rest'/>
    <feature var='urn:xmpp:rest:xwadl'/>
    <feature var='urn:xmpp:rest:xml'/>
  </query>
</iq>
  ]]></example>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>Determining when and how a resource can be accessed or modified based on permissions or 
  rights are considered outside the scope of this document. Although such mechanisms SHOULD be 
  considered specifically to the application and/or implementation of this document, 
  future specifications may address these concerns.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>REQUIRED.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; includes 'urn:xmpp:rest:xwadl' and 'urn:xmpp:rest:xml' in its registry of protocol namespaces.</p>
  </section2>
  <section2 topic='Service Discovery Identity' anchor='registrar-disco'>
    <p>The XMPP Registrar includes a Service Discovery type of "rest" within the "automation" category in its registry of service discovery identities.</p>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
    <section2 topic='XWADL Schema' anchor='schema-xwadl'>
    <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="urn:xmpp:rest-xwadl" xmlns="urn:xmpp:rest-xwadl"
	elementFormDefault="qualified">

	<xs:annotation>
		<xs:documentation>
			The protocol documented by this schema is defined in
			XEP-xxxx: http://www.xmpp.org/extensions/xep-xxxx.html
		</xs:documentation>
	</xs:annotation>

	<xs:element name="resource_type">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
				<xs:element ref="grammars" minOccurs="0" maxOccurs="1" />
				<xs:element ref="method" minOccurs="0" maxOccurs="unbounded" />
				<xs:element ref="action" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="path" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:complexType name="documentationType">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="title" type="xs:string" />
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<xs:element name="grammars">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="unbounded" />
				<xs:any namespace="##other" processContents="lax" minOccurs="0"
					maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="method">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
				<xs:element ref="request" minOccurs="0" maxOccurs="1" />
				<xs:element ref="response" minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="type" type="methodType" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:simpleType name="methodType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="GET" />
			<xs:enumeration value="POST" />
			<xs:enumeration value="PUT" />
			<xs:enumeration value="DELETE" />
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="request">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
				<xs:element name="template" type="xs:string" minOccurs="0"
					maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="mediaType" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="response">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="mediaType" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="action">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
				<xs:element ref="parameter" minOccurs="0" maxOccurs="unbounded" />
				<xs:element ref="result" minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="parameter">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required" />
			<xs:attribute name="default" type="xs:string" />
			<xs:attribute name="type" type="parameterType" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="result">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentation" type="documentationType"
					minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="type" type="parameterType" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:simpleType name="parameterType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="STRING" />
			<xs:enumeration value="INTEGER" />
			<xs:enumeration value="DOUBLE" />
			<xs:enumeration value="BOOLEAN" />
			<xs:enumeration value="LINK" />
		</xs:restriction>
	</xs:simpleType>

</xs:schema>
	]]></code>
	</section2>
	<section2 topic='XML-REST Schema' anchor='schema-rest'>
    <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="urn:xmpp:xml-rest" xmlns="urn:xmpp:xml-rest"
	elementFormDefault="qualified">

	<xs:annotation>
		<xs:documentation>
			The protocol documented by this schema is defined in
			XEP-xxxx: http://www.xmpp.org/extensions/xep-xxxx.html
		</xs:documentation>
	</xs:annotation>

	<xs:element name="resource">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="method" minOccurs="1" maxOccurs="1" />
				<xs:element ref="action" minOccurs="1" maxOccurs="1" />
			</xs:choice>
			<xs:attribute name="path" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="method">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="request" minOccurs="0" maxOccurs="1" />
				<xs:element ref="response" minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="type" type="methodType" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:simpleType name="methodType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="GET" />
			<xs:enumeration value="POST" />
			<xs:enumeration value="PUT" />
			<xs:enumeration value="DELETE" />
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="request">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="representation" type="xs:string"
					minOccurs="0" maxOccurs="1" />
				<xs:any namespace="##other" processContents="lax" minOccurs="0"
					maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="mediaType" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="response">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="representation" type="xs:string"
					minOccurs="0" maxOccurs="1" />
				<xs:any namespace="##other" processContents="lax" minOccurs="0"
					maxOccurs="unbounded" />
			</xs:sequence>
			<xs:attribute name="mediaType" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="action">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="parameter" minOccurs="0" maxOccurs="unbounded" />
				<xs:element ref="result" minOccurs="0" maxOccurs="1" />
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="parameter">
		<xs:complexType>
			<xs:choice>
				<xs:element name="STRING" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="INTEGER" type="xs:integer" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="DOUBLE" type="xs:double" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="BOOLEAN" type="xs:boolean" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="LINK" type="xs:anyURI" minOccurs="1"
					maxOccurs="1" />
			</xs:choice>
			<xs:attribute name="name" type="xs:string" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:element name="result">
		<xs:complexType>
			<xs:choice>
				<xs:element name="STRING" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="INTEGER" type="xs:integer" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="DOUBLE" type="xs:double" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="BOOLEAN" type="xs:boolean" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="LINK" type="xs:anyURI" minOccurs="1"
					maxOccurs="1" />
			</xs:choice>
		</xs:complexType>
	</xs:element>

</xs:schema>
	]]></code>
	</section2>
</section1>
</xep>
